> 1. Apresentação
    Instrutor: Phillipe Farias Costa
    Linkedin: https://www.linkedin.com/phillipfarias

> 2. Introdução a Ansible (https://docs.ansible.com/)
    Ansible é uma forma de comunicação superlumica.
    Solução OpenSource da Red Hat desenvolvida por Michael DeHaan
        Gerenciamento de Mudança
            Idempotente
            System State
            Versão de aplicação
            Alertas de mudanças

        Provisionamento
            Configuração
            Instalação
            Preparação
            Alteração do System State

        Automação
            Execução de tarefas de forma automatica
            Ordenação de tarefas (tasks)
            Realizar decisoes
            Ad-hoc tasks

        Orquestração
            Multiplos servidores
            Multiplas aplicações
            Diferentes tarefas
            Ambiente hibrido

    Ferramentas de Automatização mais usadas/conhecidas
    CHEF
    CFEngine
    SaltStack
    Puppet Labs
    Ansible

    Porque Ansible?
        -Ferramenta OpenSource
        -Simples (YAML - chave:valor)
        -Baixa curva de aprendizado
        -Agentless (sem agentes - 100% limpa)
        -Facil de Ler (YAML)
    
    Ansible Architecture
        Inventory
        API 
        Modules
        Plugins

    Como ele funciona?
        Ansible foi desenvolvido em Python 2 como versão padrão.
        é nativo em maquinas Linux, mas é possivel executar ele em maquina de outra plataformas.
        Procura sempre o interpretador /usr/bin/Python
         Variavel: ansible_python_interpreter
        Utiliza o Open SSH para comunicação
            Usuário + Senha
            Chave SSH
        
        Autenticação Descentralizada
        Pode se autenticar/conectar-se cm LDAP e KERBEROS
    
    Documentação Oficial:
    https://docs.ansible.com/

> 3. Primeiro Passos
    Deploy de 3 maquinas:
    O.S.        Function    Service         IP              User    Password
    CentOS 7    Server      Amaster         192.168.0.60    root    password
    CentOS 7    Cliente     Workpress       192.168.0.61    root    password
    Debian 9    Cliente     MariaDB         192.168.0.62    deploy  password

    Vagrant Delivery Image VM (https://www.vagrantup.com/)
        Procedores Alternativos
            Google Cloud
            AWS
            Microsoft Azure
            Digital Ocean

        Provedores Nativos
            Virtual Box
            Docker
            Microsoft Hyper-V
            VM-Ware

        Provisionadores
            Ansible
            Puppet Labs
            CHEF
            CFEngine
            Shell Script
    
    No Vagrant temos o conceito de Boxes, que são pacotes em formato de ambiente Vagrant
    Boxes oficiais: https://app.vagrant.com/boxes/search
    Instalando um Box
        $ vagrant init centos/7
        $ vagrant box add debian/stretch64

    Instalando o Ansible (https://docs.ansible.com/ansible/2.7/installation_guide/intro_installation.html)
    CentOS: $ sudo yum install ansible -y
    Debian: $ sudo apt-get install ansible -y

    $ sudo yum provides pip
    $ sudo yum install python2-pip -y
    $ sudo apt-get install python-pip -y
    $ sudo pip2 install pip --upgrade
    $ sudo pip2 install ansible
    $ sudo pip2 install ansible --upgrade

    Configurar ansible.cfg (https://docs.ansible.com/ansible/2.4/intro_configuration.html)
     /etc/ansible/ansible.cfg

     Alterações e configurações são interpretadas respeitando a seguinte ordem de privilégios:
        
        Variaveis ANSIBLE_CONFIG
            ansible.cfg no diretório corrente
                .ansible.cfg no diretório /home
                    /etc/ansible/ansible.cfg

     https://github.com/FawGamer/learning/blob/416915efa9d8cdaffc3d85797c2ecd45b1b1074a/Ansible/ansible.cfg

    Linha de comando Ad-hoc (https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html)
    Criar a pasta Treinamento_Ansible
    vim hosts
    Colocar grupos e embaixo de grupos colocar o IP das maquinas que serão afetadas: 
        [servidores_web]
        192.168.0.61

        [bd]
        192.168.0.62

    ansible [server ou group] i- [file hosts] -m [modulo]
    -k solicita a Senha do Usuário
    -u aponta o usuário 
    -i aponta o arquivo de inventario
    -a aponta o argumento (usado para rodar comandos em Linux)
    -K solicita a senha de sudo para elevação de privigio
    -b Executa com o super usuário
    -m modulo
    -v mostrando o modo verbose.


    Exemplo de comando com modulo Ping para verificar resposta ICMP:
    ansible 192.168.0.61 -i hosts -m ping -v
    ansible servidores_web -i hosts -m ping -v
    
    Exemplo de comando com envio de comandos linux as maquinas:
    ansible [alvo] -i [file hosts] -u [user] -k -a "[comando linux]"

    Exemplo de comando com modulo Systemd:
    ansible servidores_web -i hosts -u root -k -K -b -m systemd -a "name=sshd state=restarted"

    Exemplo de comando com modulo File:
    ansible -i hosts 192.168.0.61  -u root -k -K -b -m file -a dest="/tmp/ansible_teste mode=600 owner=root group=root"

    Exemplo de comando com modulo Setup:
    ansible -i hosts 192.168.0.61 -u root -k -K -b -m setup

    Directory Layout
        production                # inventory file for production servers
        staging                   # inventory file for staging environment
        group_vars/
            group1.yml             # here we assign variables to particular groups
            group2.yml
        host_vars/
            hostname1.yml          # here we assign variables to particular systems
            hostname2.yml
        library/                  # if any custom modules, put them here (optional)
        module_utils/             # if any custom module_utils to support modules, put them here (optional)
        filter_plugins/           # if any custom filter plugins, put them here (optional)
            site.yml                  # master playbook
            webservers.yml            # playbook for webserver tier
            dbservers.yml             # playbook for dbserver tier
        roles/
            common/               # this hierarchy represents a "role"
                tasks/            #
                    main.yml      #  <-- tasks file can include smaller files if warranted
                handlers/         #
                    main.yml      #  <-- handlers file
                templates/        #  <-- files for use with the template resource
                    ntp.conf.j2   #  <------- templates end in .j2
                files/            #
                    bar.txt       #  <-- files for use with the copy resource
                    foo.sh        #  <-- script files for use with the script resource
                vars/             #
                    main.yml      #  <-- variables associated with this role
                defaults/         #
                    main.yml      #  <-- default lower priority variables for this role
                meta/             #
                    main.yml      #  <-- role dependencies
                library/          # roles can also include custom modules
                module_utils/     # roles can also include custom module_utils
                lookup_plugins/   # or other types of plugins, like lookup in this case
            webtier/              # same kind of structure as "common" was above, done for the webtier role
            monitoring/           # ""
            fooapp/               # ""

> 4. Arquivo Inventory (https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html)
    Path Default: /etc/ansible/hosts
    se eu quiser colocar um arquivo customizado devo apontar o mesmo conforme exemplo abaixo:
    ansible [ip host ou group] -i [inventory] ...

    Metodo
    No arquivo hosts é onde ele recebe todo o pool de maquinas ao qual executara as linhas de comando definidas na tarefa.
    Para iniciar a explicação, neste arquivo "hosts" é registrado por grupos e através deste arquivo conseguimos fazer algumas definições de como o ansible pode se conectar a maquina.

    Tipos  de criação de groups no arquivo hosts desejado.
        # file: production
        [atlanta_webservers]
        www-atl-1.example.com
        www-atl-2.example.com

        [boston_webservers]
        www-bos-1.example.com
        www-bos-2.example.com

        [atlanta_dbservers]
        db-atl-1.example.com
        db-atl-2.example.com

        [boston_dbservers]
        db-bos-1.example.com

        # webservers in all geos
        [webservers:children]
        atlanta_webservers
        boston_webservers

        # dbservers in all geos
        [dbservers:children]
        atlanta_dbservers
        boston_dbservers

        # everything in the atlanta geo
        [atlanta:children]
        atlanta_webservers
        atlanta_dbservers

        # everything in the boston geo
        [boston:children]
        boston_webservers
        boston_dbservers

    Exemplo de comando usando para conectar a maquina diretamente:
    [Hostname] ansible_ssh_host=[IP ADDRESS] ansible_ssh_user=[USER]] ansible_ssh_pass=[SENHA]

    Elevando a linhas do Hosts a um metodo usando elevando SUDO no usuário:
    [Hostname] ansible_ssh_host=[IP ADDRESS] ansible_ssh_user=[USER]] ansible_ssh_pass=[SENHA] ansible_become=yes ansible_become_method=sudo ansible_become_user=[user sudo] ansible_become_pass=[senha de sudo]

    [Hostname] ansible_ssh_host=[IP ADDRESS] ansible_ssh_user=[USER]] ansible_ssh_pass=[SENHA] ansible_become=yes ansible_become_method=sudo ansible_become_user=[user sudo] ansible_become_pass=[senha de sudo] ansible_shell_executable=[Shell a ser usado]
    wordpress ansible_ssh_host=192.168.0.61 ansible_ssh_user=root ansible_ssh_pass=password ansible_become=yes ansible_become_method=sudo ansible_become_user=root ansible_become_pass=password ansible_shell_executable=/bin/bash

    Trabalhando com Variaveis (https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html)
    Criar no hosts o grupo nome:vars 
    [servidores_web]
        www ansible_ssh_host=192.168.0.61

    [servidores_web:vars]
        ansible_ssh_port=22
        ansible_ssh_user=root
        ansible_ssh_pass=password
        ansible_become=yes
        ansible_become_user=root
        ansible_become_pass=password
        ansible_connection=ssh    

> 5. Roles (https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html#roles)
    Roles são um conjunto de itens independentes destinados a provisionar uma determinada aplicação/infraestrutura;
    Segue uma estrutura de diretorio e estrutura padrão:
    Playbook.yml 
    roles/
        common/
            tasks/
            handlers/
            files/
            templates/
            vars/
            defaults/
            meta/
    
    Criando repositorio Ansible para Roles:
    # mkdir /ansible/roles/common/{tasks,handlers,files,templates,vars,defaults,meta} -p

    Qual a função de cada diretorio criado:
    tasks: Lista de tarefas para serem executadas dentro de uma role. 
    handlers: são manipuladores/eventos acionados por uma task.
    files: arquivos utilizados para deploy dentro de uma role.
    templates: modelos para deploy dentro de uma rede (permite o uso de variaveis).
    vars: variaveis adicionais de uma role.
    defaults: variaveis padrão de um role, executadas sempre com prioridade máxima.
    meta: trata depedencias de uma role por outra role - primeiro diretorio a ser analisado.

    Nota: dentro dos diretorios acima, com exeção do "templates", deve existir um arquivo chamado main.yml para que seja devidamente interpretado pelo ansible.

    O caminho tradicional para utilização de uma role pode ser definido basicamente por:
        ---
            -hosts: [group]
            roles:
                -common
                -nginx
                -php 
                -mysql
    Nota: o que  determina a execução de uma role são as tasks, cadastradas no arquivo tasks/main.yml
   
    
> 6. Variaveis (https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html)
     
     O ansible interpreta as variaveis de diferentes arquivos, mas existe uma ordem de prioridade:
        
        1. role/defaults/main.yml
            2. inventory file
                3.group_vars/all
                    4. group_vars/*
                        5. host_vars/*
                            6. host facts / cached set_facts
                                7. roles/vars/main.yml

    Essas variveis são usadas para facilitar no provisionamento de seus sistemas/infraestrutura. Entretanto, o Ansible permite através do Módulo setup obter os Systems Facts
    Os Systems Facts são localizados pelo modulo SETUP.

    Arquitetura de pasta ideal:
        ansible
            role
                defaults
                    main.yml
            host_vars
                hosts
                servers 
                services
            group_vars
                www
                fileserver
                workstations
                monitoracao
            roles
                vars
                    main.yml
            templates
            files
    
    Variveis em tasks e templates
 
> 7. Arquivos YAML (EMOL) (https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html#yaml-syntax)
    Linguagem YAML: Basico para Ansible

    Trabalha com chave e depois vc informar o valor, como por exemplo:

    - pessoa:
        nome: raphael
        sobrenome: maria

    Mas todos os membros da lista são iniciados com o "-" (traço) e depois um espaço:
    Exemplo:
        - frutas
            - maça
            - laranja
            - morango
    
    O Ansible divide o arquivo em 2 partes
    --- Indica o inicio do arquivo
    ... indica o fim do arquivo

    Variaveis pode ser aplicadas por "{{Chaves duplas dentro de aspas duplas}}"
    O ansible aceita valores booleanos como verdadeiro ou falso:
        criar_chave: yes ou true ou True ou TRUE 
        instalar_pacote: no ou false ou False ou FALSE 
    
    Estrutura de dados dentro do YAML
        - pessoa:
            name: Raphael Maria
            job: Sysadmin
            skill:
                -linux

    ou 
    pessoa:{name: Raphael Maria, job: Sysadmin, skill: linux}

> 8. Manipulação com Editor VI ou VIM
    Fonte: https://www.vim.org/docs.php
            https://aurelio.net/vim/
    
    v i m   b á s i c o       por Aurélio Marinho Jargas
    - - -   - - - - - -


    INTRODUÇÃO:
    ----------

    No vim temos vários "modos", que são estados do editor.
    São eles:

    Modo               Tecla   Rodapé          Descrição 
    ---------------------------------------------------------------------------  
    de Inserção        i       -- INSERT --    Inserção de texto
    de Comandos        <ESC>                   Comandos de manipulação de texto
    Linha de comando   :       :               Comandos de manipulação arquivo 
    Visual             v       -- VISUAL --    Seleção visual de texto
    Busca              /       /               Busca de padrões no texto
    Reposição          R       -- REPLACE --   Inserção sobreescrevendo


    * Os modos foram colocados em ordem de importância de uso da grande maioria
        dos usuários.
    * Para acessar qualquer um desses modos, na dúvida aperte <ESC> antes da
         sua tecla de acesso (2ª coluna da tabela)
    * Para identificar em qual modo você está, olhe no rodapé da tela! (3ª
        coluna da tabela)



    CHAMANDO O VIM:
    --------------
    vi                      Abre o vim vazio, sem arquivo (muito pouco usado)
    vi arquivo              Abre o arquivo "arquivo". Se ele não existir, o cria

    vi arquivo +            Abre com cursor no fim do arquivo
    vi arquivo +10          Abre com cursor na linha 10
    vi arquivo +/linux      Abre com cursor na 1ª ocorrência de "linux"



    SALVANDO/SAINDO DO VIM:
    ----------------------

    <F12>     Saída forçada, salva e sai (Se usar o .vimrc do aurélio  &:)  )

    Obs.: Antes de executar os comandos seguintes, aperte <ESC> para ir
        ao modo de comandos, e é claro, após, um <ENTER>

    :w                Salva
    :q                Sai
    :wq ou :x ou ZZ   Salva e sai
    :w!               Salva forçado
    :q!               Sai forçado
    :wq!              Salva e sai forçado



    EDITANDO:
    --------

    Ao entrar no vim, ele está no modo de comandos. Como saber? Olhe no rodapé
    da tela. Nada na última linha.

    Para começar a Inserir um texto, aperte "i". Você verá que aparecerá um
    "-- INSERT --" no rodapé. Agora você pode digitar seu texto normalmente.

    Quer parar para dar uma gravada? Veja o tópico acima. ( <ESC>:w )
    chega de editar e quer salvar e sair? Veja acima de novo. ( <ESC>:wq )



    COPIANDO e COLANDO:
    ------------------

    *** Usando o mouse:

    No modo de Inserção mesmo, note que o cursor do teclado (esse tracinho
    piscando na tela), está numa posição, e o cursor do mouse (mexa o mouse
    para que ele se mova) está em outra posição.

    Selecione uma parte do texto com o mouse, segurando o botão esquerdo.

    Ao colar, o texto selecionado com o MOUSE será colocado a partir do
    cursor do TECLADO. Experimente. Dependendo do mouse, a colagem se faz:

    - Apertando o botão direito
    - Segurando o botão esquerdo e apertando o direito ao mesmo tempo
    - Apertando o botão do meio (mouse de 3 botões)

    Tente, o seu será umas das 3 alternativas acima.


    *** Usando o modo visual:

    Entre no modo visual ( <ESC>v ), e simplesmente aperte as setas do
    teclado, movendo o cursor do TECLADO e selecionando o texto desejado. O
    comando para copiar o texto é o "y" de Yank.

    Volte para o modo de comandos ( <ESC> ) e posicione o cursor do TECLADO
    no lugar onde você quer colar o texto selecionado. O comando de colagem
    é o "p" de Paste.



    APAGANDO (DELETANDO):
    --------------------

    Como no tópico anterior, use o modo visual ( <ESC>v ) para selecionar o
    texto desejado. Para apagá-lo, digite "d", de Delete.

    Com o linux no modo texto, a tecla Delete do teclado também funciona para
    apagar texto. Já no X, isso é meio relativo...  &:)



    T U T O R I A L
    ---------------
    http://www.networkcomputing.com/unixworld/tutorial/009/009.part1.html

    Criar de setup de vimrc

    cat << EOF | tee -a ./vimrc 
        syntax on                   " modo visual/colorido ativo
        set number                  " ativa a numeração das linhas
        set showmode                " apresenta o modo de utilização atual (command/insert)
        set ignorecase              " ignora case sensitive durante a busca
        set ruler                   " apresenta a posição do cursor
        set hlsearch                " destaca os itens pesquisados
        set showcmd                 " visualiza comandos incompletos
        set smarttab                " trabalha a identação do arquivo
        set nowrap                  " desativa a quebra de linha
        set sm                      " ativar/desativar as coincidencias
        set visualbell              " pisca a tela no lugar do bipe
        set laststatus=1            " exibe a linha de status
        set title                   " habilita o titulo
        set term=xterm-256color     " modo do terminal
        set smartcase               " modo de pesquisa
        set incsearch               " busca incremental
        set autoindent              " auto identação
        set shiftwidth=2            " tabulação
        set smartindent             " identação
        set softtabstop=2           " tabulação
        set undolevels=1000         " número máximo de restore (undo)
    EOF

    Modulos do Ansible (https://docs.ansible.com/ansible/latest/modules/modules_by_category.html)

> 9. Tasks
 handlers
    Diretorio que trabalha com ações posteriores apos uma determinada tarefa
    Em vez de criar a tarefa pode ser configurado um handler para iniciar a tarefa

> 9. Playbooks

> 10. Ansible Galaxy

> 11. Laboratorio Final

> Extras
    Instalar servidor Ansible AWX no CentOS 8
    https://www.linkedin.com/pulse/construindo-ansible-awx-tower-com-docker-braier-alves/?trackingId=1z8qOhUASP9LI1Z3UAAyzQ%3D%3D
    